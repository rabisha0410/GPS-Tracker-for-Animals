[
    {
        "id": "899e4aa3eb8aac02",
        "type": "tab",
        "label": "GPS Tracking",
        "disabled": false,
        "info": ""
    },
    {
        "id": "153d0284b56af85e",
        "type": "serial in",
        "z": "899e4aa3eb8aac02",
        "name": "Receiver Serial",
        "serial": "0623e5a8723cb25f",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "effad05ebee0293e"
            ]
        ]
    },
    {
        "id": "effad05ebee0293e",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Parse Packet",
        "func": "let packet = msg.payload;\n\nif (typeof packet !== 'string') {\n  msg.payload = { error: \"Invalid packet type\", raw: packet };\n  return msg;\n}\n\npacket = packet.trim(); // Remove newline\n\nif (!packet.includes('Received Packet')) {\n  return null; // Skip irrelevant messages\n}\n\n// Updated Regex\nlet match = packet.match(/Received Packet \\(Size: (\\d+) bytes\\): Pkt#(\\d+)(?: Lat:([-?\\d.]+))?(?: Lon:([-?\\d.]+))?(?: Alt:([-?\\d.]+)m)? \\(RSSI: ([-?\\d]+) dBm, SNR: ([-?\\d.]+) dB\\)/);\n\nif (match) {\n  let size = parseInt(match[1]);\n  let packetNum = parseInt(match[2]);\n  let lat = match[3] ? parseFloat(match[3]) : null;\n  let lon = match[4] ? parseFloat(match[4]) : null;\n  let alt = match[5] ? parseFloat(match[5]) : null;\n  let rssi = parseInt(match[6]);\n  let snr = parseFloat(match[7]);\n  let timestamp = new Date().toISOString();\n\n  // Build payload\n  msg.payload = {\n    packetNum: packetNum,\n    lat: lat,\n    lon: lon,\n    alt: alt,\n    rssi: rssi,\n    snr: snr,\n    timestamp: timestamp\n  };\n\n  // Build params for SQLite prepared statement\n  msg.params = {\n    $packetNum: packetNum,\n    $lat: lat,\n    $lon: lon,\n    $alt: alt,\n    $rssi: rssi,\n    $snr: snr,\n    $timestamp: timestamp\n  };\n\n  // Add worldmap data for live location\n  if (lat !== null && lon !== null) {\n    msg.worldmap = {\n      name: \"Live Tracker\",\n      layer: \"live\",\n      lat: lat,\n      lon: lon,\n      alt: alt || 0,\n      icon: \"fa-user-circle\",\n      iconColor: \"blue\",\n      center: [lat, lon],\n      zoom: 15\n    };\n  }\n\n  return msg;\n} else {\n  msg.payload = { error: \"Regex did not match\", raw: packet };\n  return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "89b341b3de01cf69",
                "8dc568d9aa83e3a5",
                "a4486925b09c3f90",
                "ef3c3442bea9172e"
            ]
        ]
    },
    {
        "id": "89b341b3de01cf69",
        "type": "sqlite",
        "z": "899e4aa3eb8aac02",
        "mydb": "e2f3a4b5.c6d7e8",
        "sqlquery": "prepared",
        "sql": "INSERT INTO gps_data (packetNum, lat, lon, alt, rssi, snr, timestamp) \nVALUES ($packetNum, $lat, $lon, $alt, $rssi, $snr, $timestamp)",
        "name": "Store Data",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8dc568d9aa83e3a5",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Dashboard Payload",
        "func": "// Select the latest payload (most recent GPS point)\nlet payload = msg.payload[msg.payload.length - 1];\n\n// Geofence coordinates for Suryabinayak Jungle\nconst geofence = [\n    [27.667079, 85.465263],\n    [27.667079, 85.467263],\n    [27.669079, 85.467263],\n    [27.669079, 85.465263]\n];\n\n// const geofence = [\n//     [27.669200, 85.426500],\n//     [27.667800, 85.428000],\n//     [27.666200, 85.429700],\n//     [27.665800, 85.432000],\n//     [27.666500, 85.434200],\n//     [27.668000, 85.435000],\n//     [27.669700, 85.434300],\n//     [27.671000, 85.432500],\n//     [27.671200, 85.430000],\n//     [27.670500, 85.427800]\n// ];\n\n// Function to check if point is inside polygon\nfunction pointInPolygon(point, polygon) {\n    const x = point.lat, y = point.lon;\n    let inside = false;\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        const xi = polygon[i][0], yi = polygon[i][1];\n        const xj = polygon[j][0], yj = polygon[j][1];\n\n        const intersect = ((yi > y) !== (yj > y)) &&\n            (x < ((xj - xi) * (y - yi)) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n}\n\n// Check if the point is inside the geofence\nconst inside = pointInPolygon(payload, geofence);\n\n// Create alert message\nmsg.alert = {\n    payload: inside\n        ? \"âœ… Tracker is inside the Khwopa Jungle GeoFence.\"\n        : \"ðŸš¨ ALERT: Tracker has exited the GeoFence!\",\n    topic: \"GeoFence Status\"\n};\n\n// Existing outputs\nmsg.rssi = { payload: payload.rssi, topic: \"RSSI\" };\nmsg.snr = { payload: payload.snr, topic: \"SNR\" };\nmsg.table = { payload: msg.payload, topic: \"GPS Data\" };\nmsg.map = {\n    payload: {\n        name: \"tracker\",\n        lat: parseFloat(payload.lat),\n        lon: parseFloat(payload.lon),\n        icon: \"fa-map-marker\",\n        layer: \"GPS\",\n        popup: `Lat: ${payload.lat}, Lon: ${payload.lon}`\n    },\n    topic: \"Map\"\n};\n\n// Return all outputs (add alert as the fifth output)\nreturn [msg.rssi, msg.snr, msg.table, msg.map, msg.alert];",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 340,
        "wires": [
            [
                "ce9584479d4c6b38"
            ],
            [
                "e44aec0fa3e96771"
            ],
            [
                "213ec523293ee27f"
            ],
            [
                "1e144b99d22d1fe3"
            ],
            [
                "24f4054b266cbb92",
                "6199e23164d5a81f"
            ]
        ]
    },
    {
        "id": "ce9584479d4c6b38",
        "type": "ui_gauge",
        "z": "899e4aa3eb8aac02",
        "name": "RSSI Gauge",
        "group": "e7f8a9b0.c1d2e3",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "RSSI (dBm)",
        "label": "dBm",
        "format": "{{value}}",
        "min": "-150",
        "max": "0",
        "colors": [
            "#ff0000",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1170,
        "y": 220,
        "wires": []
    },
    {
        "id": "e44aec0fa3e96771",
        "type": "ui_gauge",
        "z": "899e4aa3eb8aac02",
        "name": "SNR Gauge",
        "group": "e7f8a9b0.c1d2e3",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "SNR (dB)",
        "label": "dB",
        "format": "{{value}}",
        "min": "-20",
        "max": "20",
        "colors": [
            "#ff0000",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "34da186f1f053822",
        "type": "ui_chart",
        "z": "899e4aa3eb8aac02",
        "name": "Altitude Chart",
        "group": "f8a9b0c1.d2e3f4",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Altitude (m)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "50",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 360,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "213ec523293ee27f",
        "type": "ui_template",
        "z": "899e4aa3eb8aac02",
        "group": "f8a9b0c1.d2e3f4",
        "name": "GPS Data Table",
        "order": 3,
        "width": 12,
        "height": 6,
        "format": "<style>\ntable { width: 100%; border-collapse: collapse; }\nth, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\nth { background-color: #f2f2f2; }\n</style>\n<table>\n  <tr>\n    <th>Packet #</th>\n    <th>Latitude</th>\n    <th>Longitude</th>\n    <th>Altitude (m)</th>\n    <th>RSSI (dBm)</th>\n    <th>SNR (dB)</th>\n    <th>Timestamp</th>\n  </tr>\n  <tr>\n    <td>{{msg.payload.packetNum}}</td>\n    <td>{{msg.payload.lat || 'N/A'}}</td>\n    <td>{{msg.payload.lon || 'N/A'}}</td>\n    <td>{{msg.payload.alt || 'N/A'}}</td>\n    <td>{{msg.payload.rssi}}</td>\n    <td>{{msg.payload.snr}}</td>\n    <td>{{msg.payload.timestamp}}</td>\n  </tr>\n</table>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1e144b99d22d1fe3",
        "type": "ui_worldmap",
        "z": "899e4aa3eb8aac02",
        "group": "a9b0c1d2.e3f4a5",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Map Widget",
        "lat": "",
        "lon": "",
        "zoom": "18",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1530,
        "y": 360,
        "wires": []
    },
    {
        "id": "ef3c3442bea9172e",
        "type": "debug",
        "z": "899e4aa3eb8aac02",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 400,
        "wires": []
    },
    {
        "id": "d41ab296fc0eb297",
        "type": "inject",
        "z": "899e4aa3eb8aac02",
        "name": "Trigger Altitude Query",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "a914070999c759a1"
            ]
        ]
    },
    {
        "id": "a914070999c759a1",
        "type": "sqlite",
        "z": "899e4aa3eb8aac02",
        "mydb": "e2f3a4b5.c6d7e8",
        "sqlquery": "fixed",
        "sql": "SELECT timestamp, alt FROM gps_data WHERE alt IS NOT NULL ORDER BY timestamp DESC LIMIT 50",
        "name": "Query Altitude",
        "x": 360,
        "y": 520,
        "wires": [
            [
                "3a47321c4c4b7732"
            ]
        ]
    },
    {
        "id": "3a47321c4c4b7732",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Format Altitude Data",
        "func": "let rows = msg.payload;\nlet data = rows.map(row => ({\n    x: new Date(row.timestamp),\n    y: row.alt || 0\n}));\nmsg.payload = [{\n    series: [\"Altitude\"],\n    data: [data],\n    labels: [\"\"]\n}];\nmsg.topic = \"Altitude\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "34da186f1f053822"
            ]
        ]
    },
    {
        "id": "a4486925b09c3f90",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Store Path and Coordinates",
        "func": "// Initialize an array to store path points if it doesn't exist\nif (!context.get('pathPoints')) {\n    context.set('pathPoints', []);\n}\n\n// Get the current path points\nlet pathPoints = context.get('pathPoints');\n\n// Add the new point (latitude and longitude) to the array\nlet newPoint = {\n    lat: msg.payload.lat,\n    lon: msg.payload.lon\n};\npathPoints.push(newPoint);\n\n// Keep only the last 50 points to avoid overloading the map (optional)\nif (pathPoints.length > 50) {\n    pathPoints.shift(); // Remove the oldest point\n}\n\n// Update the stored path points\ncontext.set('pathPoints', pathPoints);\n\n// Set msg.payload to the array of points for the Map Widget\nmsg.payload = pathPoints;\n\n// Add the latest coordinates to msg for dynamic map centering\nmsg.worldmapStartLat = newPoint.lat;\nmsg.worldmapStartLon = newPoint.lon;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 320,
        "wires": [
            [
                "d5ed09f5c4d100a2"
            ]
        ]
    },
    {
        "id": "d5ed09f5c4d100a2",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Format path and center",
        "func": "// Send the path data and center the map on the latest point\nmsg.worldmap = {\n    name: \"GPS Path\",\n    layer: \"path\",\n    path: msg.payload.map(row => [row.lat, row.lon]),\n    color: \"red\",\n    weight: 3,\n    opacity: 0.8\n};\n// Add a command to center the map on the latest point\nmsg.worldmap.center = [msg.worldmapStartLat, msg.worldmapStartLon];\nmsg.worldmap.zoom = 15; // Optional: Set zoom level\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "8dc568d9aa83e3a5"
            ]
        ]
    },
    {
        "id": "c84201f8700d28ab",
        "type": "inject",
        "z": "899e4aa3eb8aac02",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"lat\": 27.661968, \"lon\": 85.444278}",
        "payloadType": "json",
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0c8089de6f55e785",
        "type": "function",
        "z": "899e4aa3eb8aac02",
        "name": "Geo_fence",
        "func": "msg.payload = {\n    name: \"Suryabinayak Jungle\",\n    // area: [\n    //     [27.669200, 85.426500],\n    //     [27.667800, 85.428000],\n    //     [27.666200, 85.429700],\n    //     [27.665800, 85.432000],\n    //     [27.666500, 85.434200],\n    //     [27.668000, 85.435000],\n    //     [27.669700, 85.434300],\n    //     [27.671000, 85.432500],\n    //     [27.671200, 85.430000],\n    //     [27.670500, 85.427800]\n    // ],\n    area: [\n        [27.667079, 85.465263],\n        [27.667079, 85.467263],\n        [27.669079, 85.467263],\n        [27.669079, 85.465263]\n],\n    color: \"darkgreen\",\n    fillOpacity: 0.35\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 160,
        "wires": [
            [
                "1e144b99d22d1fe3"
            ]
        ]
    },
    {
        "id": "b129e144d4f5d8bf",
        "type": "inject",
        "z": "899e4aa3eb8aac02",
        "name": "Inject GeoFence Lat Lon",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1390,
        "y": 200,
        "wires": [
            [
                "0c8089de6f55e785"
            ]
        ]
    },
    {
        "id": "874a4949d2cf88ba",
        "type": "sqlite",
        "z": "899e4aa3eb8aac02",
        "mydb": "e2f3a4b5.c6d7e8",
        "sqlquery": "fixed",
        "sql": "CREATE TABLE IF NOT EXISTS gps_data (id INTEGER PRIMARY KEY AUTOINCREMENT, packetNum INTEGER, lat REAL, lon REAL, alt REAL, rssi INTEGER, snr REAL, timestamp TEXT)",
        "name": "Create Table",
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d5a3ecdd8ce0f1ce",
        "type": "inject",
        "z": "899e4aa3eb8aac02",
        "name": "Inside the GeoFence",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"lat\": 27.66806, \"lon\": 85.43182}",
        "payloadType": "json",
        "x": 390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9f5bb01d5d90e52a",
        "type": "inject",
        "z": "899e4aa3eb8aac02",
        "name": "Outside the GeoFence",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"lat\": 27.6666, \"lon\": 85.42798}",
        "payloadType": "json",
        "x": 380,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "24f4054b266cbb92",
        "type": "ui_text",
        "z": "899e4aa3eb8aac02",
        "group": "3408d444e45450f3",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1150,
        "y": 380,
        "wires": []
    },
    {
        "id": "6199e23164d5a81f",
        "type": "ui_toast",
        "z": "899e4aa3eb8aac02",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1190,
        "y": 420,
        "wires": []
    },
    {
        "id": "55da915e7a55d25c",
        "type": "ui_spacer",
        "z": "899e4aa3eb8aac02",
        "name": "spacer",
        "group": "f8a9b0c1.d2e3f4",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "0623e5a8723cb25f",
        "type": "serial-port",
        "name": "",
        "serialport": "COM5",
        "serialbaud": "115200",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": 10000
    },
    {
        "id": "e2f3a4b5.c6d7e8",
        "type": "sqlitedb",
        "db": "C:\\Users\\User\\gps_data.db",
        "mode": "RWC"
    },
    {
        "id": "e7f8a9b0.c1d2e3",
        "type": "ui_group",
        "name": "Signal Metrics",
        "tab": "b0c1d2e3.f4a5b6",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f8a9b0c1.d2e3f4",
        "type": "ui_group",
        "name": "GPS Data",
        "tab": "b0c1d2e3.f4a5b6",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "a9b0c1d2.e3f4a5",
        "type": "ui_group",
        "name": "Map",
        "tab": "b0c1d2e3.f4a5b6",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "3408d444e45450f3",
        "type": "ui_group",
        "name": "Alert",
        "tab": "b0c1d2e3.f4a5b6",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0c1d2e3.f4a5b6",
        "type": "ui_tab",
        "name": "GPS Tracker",
        "icon": "gps_fixed",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]